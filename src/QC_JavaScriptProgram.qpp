/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaScriptProgram.qpp defines the %Qore JavaScriptProgram class */
/*
    QC_JavaScriptProgram.qpp

    Qore Programming Language

    Copyright 2024 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_JavaScriptProgram.h"
#include "QC_JavaScriptObject.h"

//! Program for embedding and executing JavaScript code
/**
*/
qclass JavaScriptProgram [arg=QoreV8ProgramData* jsp; ns=V8; dom=EMBEDDED_LOGIC];

//! Creates the object and parses and runs the given source code
/** @param source_code the JavaScript source to parse and compile
    @param source_label the label or file name of the source
*/
JavaScriptProgram::constructor(string source_code, string source_label) {
    ReferenceHolder<QoreV8ProgramData> jsp(new QoreV8ProgramData(*source_code, *source_label, xsink),
        xsink);
    if (*xsink) {
        return;
    }

    //printd(5, "JavaScriptProgram::constructor() created %p\n", *jsp);
    self->setPrivate(CID_JAVASCRIPTPROGRAM, jsp.release());
}

//! Destroys the JavaScript program and invalidates the object
/**
*/
JavaScriptProgram::destructor() {
    //printd(5, "Qore JavaScriptProgram::destructor() this: %p\n", jsp);
    jsp->destructor(xsink);
    jsp->deref(xsink);
}

//! Runs the program
/**
    @note Exceptions parsing or compiling the JavaScript code are thrown according to @ref javascript_exceptions
*/
auto JavaScriptProgram::run() {
    return jsp->run(xsink);
}

//! Returns the global proxy object
/**
    @return the global proxy object
*/
JavaScriptObject JavaScriptProgram::getGlobal() {
    return jsp->getGlobal(xsink);
}
