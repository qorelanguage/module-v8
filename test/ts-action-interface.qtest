#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires QUnit
%requires RestClient
%requires ../qlib/TypeScriptActionInterface
%requires v8

%exec-class TypeScriptActionInterfaceTest

public class TypeScriptActionInterfaceTest inherits QUnit::Test {
    constructor() : Test("TypeScriptActionInterfaceTest", "1.0") {
        addTestCase("pool", \poolTest());
        addTestCase("sanity", \sanityTest());
        addTestCase("js", \jsTest());
        addTestCase("test API", \testApi());

        # Return for compatibility with test harnesses that check the script's return value
        set_return_value(main());
    }

    private testApi() {
        chdir(get_script_dir());
        JavaScriptProgramPool pool("var exports = {};\n" + File::readTextFile("test.js"), "test.js",
            sub (JavaScriptProgram pgm) {});
        JavaScriptProgram pgm = pool.get();
        on_exit pool.release(pgm);
        code run = pgm.getGlobal().exports.qtester.toData().run;
        assertThrows("JAVASCRIPT-EXCEPTION", "authorization_code", run, TypeScriptActionInterface::TestApi);
    }

    private poolTest() {
        JavaScriptProgramPool pool("
var exports = {};

var obj = {
    'actionsCatalogue': {
        'registerAppActions': function (api) {
            api.registerApp({
                'name': 'TestApp',
                'display_name': 'TestApp',
                'short_desc': 'test',
                'desc': 'test',
                'logo': 'AA==',
                'logo_file_name': 'test.svg',
                'logo_mime_type': 'image/svg+xml',
            });

            api.registerAction({
                'app': 'TestApp',
                'action': 'test-api',
                'display_name': 'test-api',
                'short_desc': 'Test API',
                'desc': 'Test API',
                'action_code': 2,
                'api_function': function (a, b, c) {
                    return 1;
                },
            });
        }
    }
};", "test.js", sub (JavaScriptProgram pgm) {
            pgm.getGlobal().obj.actionsCatalogue.registerAppActions(TypeScriptActionInterface::Api);
        });

        JavaScriptProgram js = pool.get();
        on_exit pool.release(js);
        JavaScriptObject obj = js.getGlobal().getProperty("obj");

        AbstractDataProvider prov = TypeScriptActionInterface::getAppDataProvider("TestApp").
            getChildProviderEx("test-api");
        assertEq(1, prov.doRequest());
        JavaScriptProgram pgm0 = pool.get();
        on_exit pool.release(pgm0);
        assertEq(1, prov.doRequest());
    }

    private sanityTest() {
        string name = "TestApp-" + get_random_string();
        hash<auto> app = {
            "name": name,
            "display_name": "TestApp",
            "short_desc": "Test",
            "desc": "Test",
            "logo": make_base64_string(<00>),
            "logo_file_name": "test.svg",
            "logo_mime_type": MimeTypeSvg,
        };
        JavaScriptProgramPool pool("", "pgm.js", sub (JavaScriptProgram pgm) {});
        TypeScriptActionInterface::registerApp(app, pool);
        hash<DataProviderAppInfo> appinfo = DataProviderActionCatalog::getAppEx(name);
        assertEq(name, appinfo.name);

        hash<auto> action = {
            "app": name,
            "action": "test-api",
            "display_name": "Test API",
            "short_desc": "Test API",
            "desc": "Test API",
            "action_code": DPAT_API,
            "api_function": sub () {},
        };
        TypeScriptActionInterface::registerAction(action, pool);
        hash<DataProviderActionInfo> actioninfo = DataProviderActionCatalog::getAppActionEx(name, "test-api");
        assertEq("test-api", actioninfo.action);

        JavaScriptProgram pgm0 = pool.get();
        on_exit pool.release(pgm0);
        JavaScriptProgram pgm1 = pool.get();
        on_exit pool.release(pgm1);
        assertEq(2, pool.size());
    }

    private jsTest() {
        chdir(get_script_dir());
        JavaScriptProgramPool pool("var exports = {};\n" + File::readTextFile("example.js"), "example.js",
            sub (JavaScriptProgram pgm) {});
        JavaScriptProgram pgm = pool.get();
        on_exit pool.release(pgm);
        JavaScriptObject obj = pgm.getGlobal().exports;

        obj.actionsCatalogue.registerAppActions(TypeScriptActionInterface::Api);

        hash<DataProviderAppInfo> appinfo = DataProviderActionCatalog::getAppEx("js-test");
        assertEq("js-test", appinfo.name);

        hash<DataProviderActionInfo> actioninfo = DataProviderActionCatalog::getAppActionEx("js-test", "test-api");
        assertEq("test-api", actioninfo.action);
        assertTrue(actioninfo.data_dependent_options);
        assertTrue(actioninfo.options.key.structural_determinate);

        appinfo = DataProviderActionCatalog::getAppEx("js-swagger-test");
        assertEq("js-swagger-test", appinfo.name);

        actioninfo = DataProviderActionCatalog::getAppActionEx("js-swagger-test", "create-pet");
        assertEq("create-pet", actioninfo.action);

        hash<auto> config = {
            "name": "test",
            "url": "tsrest-js-swagger-test://",
            "opts": {
                "subdomain": "test",
                "token": "x",
            },
        };
        TypeScriptAppRestConnection conn(config);
        assertEq("tsrest-js-swagger-test://test.example.com/api", conn.getUrl());
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.getRealOptions().oauth2_auth_url);
        assertEq("https://test.example.com/oauth2/auth", conn.getAuthUrl());
        assertEq("https://test.example.com/oauth2/auth?scope=&redirect_uri=auto&client_id=x&response_type=code",
            conn.getAuthorizationCodeRequest());
        assertEq("https://test.example.com/oauth2/auth", conn.getOAuth2Options().oauth2_auth_url);
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.orig_opts.oauth2_auth_url);

        hash<ConnectionSchemeInfo> scheme = ConnectionSchemeCache::getSchemeEx("tsrest-js-swagger-test");
        conn = scheme.cls.newObject(config);
        assertEq("tsrest-js-swagger-test://test.example.com/api", conn.getUrl());
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.getRealOptions().oauth2_auth_url);
        assertEq("https://test.example.com/oauth2/auth", conn.getAuthUrl());
        assertEq("https://test.example.com/oauth2/auth?scope=&redirect_uri=auto&client_id=x&response_type=code",
            conn.getAuthorizationCodeRequest());
        assertEq("https://test.example.com/oauth2/auth", conn.getOAuth2Options().oauth2_auth_url);
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.orig_opts.oauth2_auth_url);

        *hash<string, bool> fh = conn.getFeatures();
        {
            on_error printf("fh: %y\n", fh);
            assertTrue(fh{RestConnection::RCF_OAUTH2_AUTH_CODE});
        }

        AbstractDataProvider prov =
            TypeScriptActionInterface::getDataProvider("js-swagger-test", conn).getChildProviderEx("create-pet");
        AbstractDataProviderType t = prov.getRequestType();
        assertEq(6, t.getFields().size());

        #prov = TypeScriptActionInterface::getDataProvider("js-swagger-test", conn).getChildProviderEx("get-pet");
        #prov.doRequest({"id": 1});

        string cname = TypeScriptActionInterface::createConnection("js-swagger-test", {} + {
            "opts": {
                "subdomain": "test",
                "username": "x",
                "password": "y",
                "oauth2_grant_type": NOTHING,
            },
        });
        assertRegex("^app-", cname);
        conn = TypeScriptActionInterface::getConnection(cname);
        assertNothing(conn.getRealOptions().oauth2_grant_type);

        config = {
            "name": "test",
            "url": "tsrest-js-test://",
            "opts": {
                "token": "x",
            },
        };
        conn = new TypeScriptAppRestConnection(config);
        prov = TypeScriptActionInterface::getDataProvider("js-test", conn).getChildProviderEx("test-api");
        t = prov.getRequestTypeWithData({"key": "A"});
        assertEq(("count", "other", "key", "a0", "a1"), keys t.getFields());
        t = prov.getRequestTypeWithData({"key": "B"});
        assertEq(("count", "other", "key", "b0", "b1"), keys t.getFields());

        TypeScriptAppRestClient rest = conn.get(False);
        hash<auto> h = TestRestClient::test0(rest, {});
        assertEq("abc123", h.account_id);
        assertEq("https://www.example.com/api/abc123", rest.getURL());
    }
}

class TestRestClient inherits TypeScriptAppRestClient {
    static *hash<auto> test0(TypeScriptAppRestClient client, hash<auto> h) {
        return client.getUpdateOptionsAfterLogin(h);
    }
}
