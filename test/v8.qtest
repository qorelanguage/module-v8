#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires v8
%requires QUnit
%requires Util

%exec-class V8Test

class V8Test inherits Test {
    public {
    }

    constructor() : Test("v8 test", "1.0") {
        addTestCase("process", \processTest());
        addTestCase("io test", \ioTest());
        addTestCase("async test", \asyncTest());
        addTestCase("v8 program test", \v8ProgramTest());
        addTestCase("exception test", \v8ExceptionTest());
        # Set return value for compatibility with test harnesses that check the return value
        set_return_value(main());
    }

    processTest() {
        {
            JavaScriptProgram js("
var exports = {};
var exec = require('child_process').exec;
function test() {
    console.log('about to call exec');
    exec('pwd', function callback(error, stdout, stderr) {
        exports.io = {
            'error': error,
            'stdout': stdout,
            'stderr': stderr,
        };
    });
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            code test = global.test.toData();
            test();
            js.spinOnce();
            assertEq(Type::String, global.exports.io.toData().stdout.type());
        }
    }

    ioTest() {
        {
            JavaScriptProgram js("
const Https = require('https');

async function doPromise0() {
    try {
        let response = await fetch('https://api.qoretechnologies.com/api/public/info');
        return await response.json();
    } catch (e) {
        return {
            'message': e.message,
            'stack': e.stack,
        };
    }
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            code doPromise0 = global.doPromise0.toData();
            JavaScriptPromise v0 = doPromise0();
            auto rv0;
            v0.then(sub (auto v) { rv0 = v.toData(); });
            assertTrue(v0.hasHandler());
            assertEq(Pending, v0.getState());
            v0.wait();
            assertEq(Type::Hash, rv0.type());

            v0 = doPromise0();
            v0.then(sub (auto v) { rv0 = v.toData(); });
            assertTrue(v0.hasHandler());
            assertEq(Pending, v0.getState());
            v0.wait();
            assertEq(Type::Hash, rv0.type());
        }

        {
            JavaScriptProgram js("
const Https = require('https');

async function doPromise0() {
    try {
        let response = await fetch('https://api.qoretechnologies.com/api/public/info');
        return await response.json();
    } catch (e) {
        return {
            'message': e.message,
            'stack': e.stack,
        };
    }
}

async function doPromise1() {
    try {
        let response = await fetch('https://api.qoretechnologies.com/api/public/info');
        return await response.json();
    } catch (e) {
        return {
            'message': e.message,
            'stack': e.stack,
        };
    }
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            code doPromise0 = global.doPromise0.toData();
            code doPromise1 = global.doPromise1.toData();
            JavaScriptPromise v0 = doPromise0();
            JavaScriptPromise v1 = doPromise1();
            auto rv0;
            auto rv1;
            v0.then(sub (auto v) { rv0 = v.toData(); });
            v1.then(sub (auto v) { rv1 = v.toData(); });
            assertTrue(v0.hasHandler());
            assertTrue(v1.hasHandler());
            v0.wait();
            v1.wait();
            assertEq(Type::Hash, rv0.type());
            assertEq(Type::Hash, rv1.type());

            v0 = doPromise0();
            v1 = doPromise1();
            v0.then(sub (auto v) { rv0 = v.toData(); });
            v1.then(sub (auto v) { rv1 = v.toData(); });
            assertTrue(v0.hasHandler());
            assertTrue(v1.hasHandler());
            v0.wait();
            v1.wait();
            assertEq(Type::Hash, rv0.type());
            assertEq(Type::Hash, rv1.type());
        }

        {
            JavaScriptProgram js("
const Https = require('https');

async function doPromise0() {
    let response = await fetch('https://error_no_host:99999');
    return await response.json();
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            code doPromise0 = global.doPromise0.toData();
            JavaScriptPromise v0 = doPromise0();
            auto rv0;
            auto err;
            v0.then(sub (auto v) {
                rv0 = v.toData();
            }, sub (auto e) {
                err = e.toData();
            });
            assertTrue(v0.hasHandler());
            assertEq(Pending, v0.getState());
            v0.wait();
            assertEq(Type::Hash, err.type());

            v0 = doPromise0();
            v0.then(sub (auto v) {
                rv0 = v.toData();
            }, sub (auto e) {
                err = e.toData();
            });
            assertTrue(v0.hasHandler());
            assertEq(Pending, v0.getState());
            v0.wait();
            assertEq(Type::Hash, err.type());
        }
    }

    asyncTest() {
        {
            JavaScriptProgram js0 = getEventProgram();
            JavaScriptProgram js1 = getEventProgram();
            JavaScriptProgram js2 = getEventProgram();
            JavaScriptProgram js3 = getEventProgram();
            JavaScriptProgram js4 = getEventProgram();

            JavaScriptObject g0 = js0.getGlobal();
            JavaScriptObject g1 = js0.getGlobal();
            JavaScriptObject g2 = js0.getGlobal();
            JavaScriptObject g3 = js0.getGlobal();
            JavaScriptObject g4 = js0.getGlobal();

            code doPromise0 = g0.getProperty("doPromise").toData();
            code doPromise1 = g1.getProperty("doPromise").toData();
            code doPromise2 = g2.getProperty("doPromise").toData();
            code doPromise3 = g3.getProperty("doPromise").toData();
            code doPromise4 = g4.getProperty("doPromise").toData();

            code setValue0 = g0.getProperty("setValue").toData();
            code setValue1 = g1.getProperty("setValue").toData();
            code setValue2 = g2.getProperty("setValue").toData();
            code setValue3 = g3.getProperty("setValue").toData();
            code setValue4 = g4.getProperty("setValue").toData();

            JavaScriptPromise p0 = doPromise0();
            JavaScriptPromise p1 = doPromise1();
            JavaScriptPromise p2 = doPromise2();
            JavaScriptPromise p3 = doPromise3();
            JavaScriptPromise p4 = doPromise4();

            Queue q0();
            Queue q1();
            Queue q2();
            Queue q3();
            Queue q4();

            p0.then(sub (auto v) { q0.push(v); });
            p1.then(sub (auto v) { q1.push(v); });
            p2.then(sub (auto v) { q2.push(v); });
            p3.then(sub (auto v) { q3.push(v); });
            p4.then(sub (auto v) { q4.push(v); });

            string str = get_random_string();
            setValue0(str);
            setValue1(str);
            setValue2(str);
            setValue3(str);
            setValue4(str);

            p0.wait();
            p1.wait();
            p2.wait();
            p3.wait();
            p4.wait();

            assertEq(str, q0.get());
            assertEq(str, q1.get());
            assertEq(str, q2.get());
            assertEq(str, q3.get());
            assertEq(str, q4.get());
        }

        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            code f = global.getProperty("doPromise").toData();
            JavaScriptPromise v = f();
            auto val;
            v.then(sub (auto v) {
                val = v;
            });
            v.wait();
            assertEq(100, val);
        }

        /*
        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            throw new Error('Test error');
        }, 1)
    });
}

async function doAsync(a, err) {
    a().then((v, r) => err.result = v).catch((e) => err.error = e);
}
", "test.js");
            JavaScriptObject g = js.getGlobal();
            JavaScriptObject doPromise = g.doPromise;
            code doAsync = g.doAsync.toData();
            JavaScriptObject err(js);
            JavaScriptPromise v = doAsync(doPromise, err);
            auto val;
            v.then(sub (auto v0) {
                throw "ERR";
            });
            assertTrue(v.hasHandler());
            v.wait();
            printf("err: %y\n", err.toData());
            assertEq(1, val);
        }
        */

        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}

async function runAsync(a, enqueue) {
    enqueue(await a());
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            Queue q();
            code enqueue = sub (auto v) {
                q.push(v);
            };
            auto v = a(f, enqueue);

            Queue bgq();
            Counter c(1);
            background sub () {
                c.dec();
                bgq.push(js.spinOnce());
            }();
            c.waitForZero();

            assertEq(0, bgq.get());
            assertEq(100, q.get());
        }

        {
            JavaScriptProgram js("
const EventEmitter = require('node:events');
const eventEmitter = new EventEmitter();

async function doPromise() {
    return new Promise(function (resolve) {
        eventEmitter.on('async_event', (v) => {
            resolve(v);
        })
    });
}

function setValue(v) {
    eventEmitter.emit('async_event', v);
}
", "test.js");

            JavaScriptObject global = js.getGlobal();

            code doPromise = global.getProperty("doPromise").toData();
            code setValue = global.getProperty("setValue").toData();

            JavaScriptPromise v = doPromise();

            string str = get_random_string();
            setValue(str);
            string str0;
            v.then(sub (string s) { str0 = s; });
            v.wait();
            assertEq(str, str0);
        }

        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}

async function runAsync(a, b) {
    b.result = await a();
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            int ec = js.spinOnce();
            assertEq(0, ec);
            assertEq(100, rv.toData().result);
        }

        {
            JavaScriptProgram js("
async function doPromise() {
    setTimeout(function() {}, 1);
    return 100;
}

async function runAsync(a, b) {
    b.result = await a();
}
", "test.js");
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            int ec = js.spinOnce();
            assertEq(0, ec);
            assertEq(100, rv.toData().result);
        }

        {
            JavaScriptProgram js("
async function doPromise() {
    setTimeout(function() {}, 1);
    throw new Error('Test error');
}

async function runAsync(a, b) {
    try {
        b.result = await a();
    } catch (e) {
        b.error = {
            'message': e.message,
            'stack': e.stack,
        };
    }
}
", "test.js");
            int ec = js.spinOnce();
            assertEq(0, ec);
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            ec = js.spinOnce();
            assertEq(0, ec);
            hash<auto> h = rv.toData();
            assertEq("Test error", h.error.message);
            assertEq(Type::String, h.error.stack.type());
        }
    }

    JavaScriptProgram getEventProgram() {
            return new JavaScriptProgram("
const EventEmitter = require('node:events');
const eventEmitter = new EventEmitter();

async function doPromise() {
    return new Promise(function (resolve) {
        eventEmitter.on('async_event', (v) => {
            resolve(v);
        })
    });
}

function setValue(v) {
    eventEmitter.emit('async_event', v);
}
", "test.js");
    }

    v8ProgramTest() {
        JavaScriptProgram js("globalThis.val = 'hi'", "test.js");
        assertEq("hi", js.getGlobal().val);

        js = new JavaScriptProgram("globalThis.val = 1", "test.js");
        assertEq(1, js.getGlobal().val);

        js = new JavaScriptProgram("globalThis.val = 1.1", "test.js");
        assertEq(1.1, js.getGlobal().val);

        js = new JavaScriptProgram("globalThis.val = true", "test.js");
        assertEq(True, js.getGlobal().val);

        js = new JavaScriptProgram("globalThis.val = false", "test.js");
        assertEq(False, js.getGlobal().val);

        js = new JavaScriptProgram("globalThis.val = [0, 'one', 2.1]", "test.js");
        assertEq((0, "one", 2.1), js.getGlobal().val);

        JavaScriptObject o(js);
        assertEq("JavaScriptObject", o.className());

        delete js;
        assertEq("JavaScriptObject", o.className());

        js = new JavaScriptProgram("
var foo = function(arg) {
    return arg + 1;
}", "test.js");
        JavaScriptObject global = js.getGlobal();
        auto foo = global.getProperty("foo");
        assertEq(NT_OBJECT, foo.typeCode());
        assertEq("JavaScriptObject", foo.className());
        assertTrue(foo.toData().callp());
        assertEq(2, foo.callAsFunction(NOTHING, 1));

        js = new JavaScriptProgram("var obj = {
    id: 1,
    type: 't',
    func: function(a) {
        ++this.id;
        return a + 1;
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        hash<auto> h = o.toData();
        assertEq({"id": 1, "type": "t"}, h - "func");
        assertTrue(h.func.callp());
        assertEq(1, o.getProperty("id"));
        o.func(1);
        assertEq(2, o.getProperty("id"));
        assertEq(2, o.func(1));
        assertEq(3, o.getProperty("id"));

        js = new JavaScriptProgram("var obj = {
    func: function(a, b) {
        return typeof a;
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        code c = int sub (int i) {
            return i + 1;
        };
        assertEq("function", o.func(c, 1));

        js = new JavaScriptProgram("var obj = {
    func: function(a, b) {
        return a(b);
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        assertEq(2, o.func(c, 1));

        js = new JavaScriptProgram("var obj = {
    func: function(a, b) {
        return a.a(b);
    },
    func0: function(a) {
        return JSON.stringify(a);
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        hash<auto> obj = {
            "a": c,
        };
        assertEq(2, o.func(obj, 1));

        js = new JavaScriptProgram("var obj = {
    func: null,
    store: function(a) {
        this.func = a;
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertNothing(h.func);
        assertTrue(h.store.callp());
        o.store(int sub (int i) {
            return i + 1;
        });
        h = o.toData();
        assertTrue(h.func.callp());
        assertEq(2, o.func(1));

        js = new JavaScriptProgram("var obj = {
    a: 'string',
    b: 1,
    c: {
      d: {
        e: 'hi',
      }
    }
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        assertEq("string", o.a);
        assertEq(1, o.b);
        assertEq("hi", o.c.d.e);
        h = o.toData();
        assertEq("string", h.a);
        assertEq(1, h.b);
        assertEq("hi", h.c.d.e);

        js = new JavaScriptProgram("var obj = {
    a: [1, 2, 3]
};
obj", "test.js");
        o = js.getGlobal().obj;
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        assertEq((1, 2, 3), o.a);
        h = o.toData();
        assertEq((1, 2, 3), h.a);
    }

    v8ExceptionTest() {
        hash<ExceptionInfo> ex;
        try {
            JavaScriptProgram js("var obj = {
    func1: function(a, b) {
        return a.a(b);
    },
    func0: function(a, b) {
        return this.func1(a, b);
    }
};
obj", "test.js");
            JavaScriptObject o = js.getGlobal().obj;
            o.func0(1, 1);
            assertFalse(True);
        } catch (hash<ExceptionInfo> ex0) {
            ex = ex0;
        }
        on_error printf("source exception: %s\n", get_exception_string(ex));
        assertEq("Object.func1", ex.callstack[0].function);
        assertEq(3, ex.callstack[0].line);
        assertEq("Object.func0", ex.callstack[1].function);
        assertEq(6, ex.callstack[1].line);

        try {
            JavaScriptProgram js("const obj = {
    func: function(a) {
        return a();
    },
};
obj", "test.js");
            JavaScriptObject o = js.getGlobal().obj();
            o.func.callAsFunction(o, sub () {
                throw "ERR", "err";
            });
            assertFalse(True);
        } catch (hash<ExceptionInfo> ex0) {
            ex = ex0;
        }
        #printf("%s\n", get_exception_string(ex));
    }
}
