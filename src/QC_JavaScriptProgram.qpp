/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaScriptProgram.qpp defines the %Qore JavaScriptProgram class */
/*
    QC_JavaScriptProgram.qpp

    Qore Programming Language

    Copyright 2024 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_JavaScriptProgram.h"
#include "QC_JavaScriptObject.h"

//! Program for embedding and executing JavaScript code
/**
*/
qclass JavaScriptProgram [arg=QoreV8ProgramData* jsp; ns=V8; dom=EMBEDDED_LOGIC];

//! Creates the object and parses and runs the given source code
/** @param source_code the JavaScript source to parse and compile
    @param source_label the label or file name of the source
*/
JavaScriptProgram::constructor(string source_code, string source_label) {
    ReferenceHolder<QoreV8ProgramData> jsp(new QoreV8ProgramData(*source_code, *source_label, xsink),
        xsink);
    if (*xsink) {
        return;
    }

    jsp->setObject(self);

    //printd(5, "JavaScriptProgram::constructor() created %p\n", *jsp);
    self->setPrivate(CID_JAVASCRIPTPROGRAM, jsp.release());
}

//! Destroys the JavaScript program and invalidates the object
/**
*/
JavaScriptProgram::destructor() {
    //printd(5, "Qore JavaScriptProgram::destructor() this: %p\n", jsp);
    jsp->destructor(xsink);
    jsp->deref(xsink);
}

//! Copies the object
/**
*/
JavaScriptProgram::copy() {
    self->setPrivate(CID_JAVASCRIPTPROGRAM, new QoreV8ProgramData(xsink, *jsp, self));
}

//! Returns the global proxy object
/**
    @return the global proxy object
*/
JavaScriptObject JavaScriptProgram::getGlobal() {
    return jsp->getGlobal(xsink);
}

//! Sets the "save reference" callback for %Qore data stored in JavaScript objects
/** @par Example:
    @code{.py}
hash<auto> ref_cache;
code callback = sub (auto v) {
    # save reference to value in cache, so it doesn't go out of scope
    object_cache{v.uniqueHash()} = v;
}
v8pgm.setSaveReferenceCallback(callback);
    @endcode

    @param save_ref_callback the callback to save any %Qore values stored in Python code

    Due to the differences in garbage collection approaches between %Qore and JavaScript, %Qore objects must be
    managed with a deterministic life cycle; JavaScript objects have only weak references to %Qore values due to the
    lack of destructors in JavaScript and the lack of determinism in the JavaScript runtime for object lifecycle
    management.

    The callback set here will be called any time a %Qore reference is stored in a Python object; if no callback is
    set, then the standard thread-local implementation is used where %Qore references are saved in a thread-local
    hash.

    @see @ref v8_qore_reference_lifecycle_management for more information
*/
JavaScriptProgram::setSaveReferenceCallback(*code save_ref_callback) [dom=PROCESS] {
    jsp->setSaveReferenceCallback(save_ref_callback);
}

//! Spins the event loop once for the program
/**
*/
int JavaScriptProgram::spinOnce() {
    return jsp->spinOnce();
}

//! Spins the event loop the program
/**
*/
int JavaScriptProgram::spinEventLoop() {
    return jsp->spinEventLoop();
}