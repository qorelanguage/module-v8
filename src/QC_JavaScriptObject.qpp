/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaScriptObject.qpp defines the %Qore JavaScriptObject class */
/*
    QC_JavaScriptObject.qpp

    Qore Programming Language

    Copyright 2024 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_JavaScriptObject.h"
#include "QC_JavaScriptProgram.h"

QoreV8Object::QoreV8Object(QoreV8Program* pgm, v8::Local<v8::Object> obj) : pgm(pgm) {
    pgm->tRef();
    this->obj.Reset(pgm->getIsolate(), obj);
}

QoreV8Object::~QoreV8Object() {
    obj.Reset();
    pgm->tDeref();
}

QoreHashNode* QoreV8Object::toHash(QoreV8ProgramHelper& v8h) const {
    ExceptionSink* xsink = v8h.getExceptionSink();
    ReferenceHolder<QoreHashNode> h(new QoreHashNode(autoTypeInfo), xsink);
    v8::Local<v8::Object> obj = this->obj.Get(v8h.getIsolate());
    v8::MaybeLocal<v8::Array> maybe_props = obj->GetPropertyNames(v8h.getContext());
    if (maybe_props.IsEmpty()) {
        v8h.checkException();
        return h.release();
    }
    v8::Local<v8::Array> props = maybe_props.ToLocalChecked();
    for (uint32_t i = 0, e = props->Length(); i < e; ++i) {
        v8::MaybeLocal<v8::Value> key = props->Get(v8h.getContext(), i);
        if (key.IsEmpty()) {
            if (v8h.checkException()) {
                return nullptr;
            }
            continue;
        }
        v8::Local<v8::Value> k = key.ToLocalChecked();
        ValueHolder qk(v8h.getProgram()->getQoreValue(xsink, k), xsink);
        if (*xsink) {
            if (v8h.checkException()) {
                return nullptr;
            }
            continue;
        }
        assert(qk->getType() == NT_STRING);

        v8::MaybeLocal<v8::Value> value = obj->Get(v8h.getContext(), k);
        if (value.IsEmpty()) {
            if (v8h.checkException()) {
                return nullptr;
            }
            h->setKeyValue(qk->get<const QoreStringNode>()->c_str(), QoreValue(), xsink);
            assert(!*xsink);
            continue;
        }
        v8::Local<v8::Value> v = value.ToLocalChecked();
        ValueHolder qv(v8h.getProgram()->getQoreValue(xsink, v), xsink);
        h->setKeyValue(qk->get<const QoreStringNode>()->c_str(), qv.release(), xsink);
        assert(!*xsink);
    }
    return h.release();
}

//! Object for embedding and executing JavaScript code
/**
*/
qclass JavaScriptObject [arg=QoreV8Object* o; ns=V8];

//! Creates the object and parses and runs the given source code
/** @param pgm the JavaScriptProgram where the object will be created from
*/
JavaScriptObject::constructor(JavaScriptProgram[QoreV8ProgramData] pgm) {
    ReferenceHolder<QoreV8ProgramData> holder(pgm, xsink);

    QoreV8ProgramHelper v8h(xsink, pgm);
    if (*xsink) {
        return;
    }

    v8::Isolate* isolate = pgm->getIsolate();

    //printd(5, "JavaScriptObject::constructor() pgm: %p isolate: %p\n", pgm, isolate);

    v8::Local<v8::Object> obj = v8::Object::New(isolate);
    //printd(5, "JavaScriptObject::constructor() created %p\n", *obj);
    self->setPrivate(CID_JAVASCRIPTOBJECT, new QoreV8Object(pgm, obj));
}

//! Call the given function and return the result
/** @param ... arguments to the function should follow the name converted to JavaScript values as per
    @ref javascript_qore_to_javascript

    @return the return value of the JavaScript function converted to Qore as per @ref javascript_javascript_to_qore

    @see @ref javascript_exceptions
*/
auto JavaScriptObject::callAsFunction(...) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
}

//! Call the given function and return the result
/** @param argv arguments to the function as a list converted to JavaScript values as per @ref javascript_qore_to_javascript

    @return the return value of the JavaScript function converted to Qore as per @ref javascript_javascript_to_qore

    @see @ref javascript_exceptions
*/
auto JavaScriptObject::callAsFunctionArgs(*softlist<auto> argv) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
}

//! Returns the object's properties as a hash
/** @return the object's properties as a hash
*/
hash<auto> JavaScriptObject::toHash() {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->toHash(v8h);
}