#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires v8
%requires QUnit

%exec-class V8Test

class V8Test inherits Test {
    public {
    }

    constructor() : Test("v8 test", "1.0") {
        addTestCase("v8 program test", \v8ProgramTest());
        # Set return value for compatibility with test harnesses that check the return value
        set_return_value(main());
    }

    v8ProgramTest() {
        JavaScriptProgram js("'hi'", "test.js");
        assertEq("hi", js.run());

        js = new JavaScriptProgram("1", "test.js");
        assertEq(1, js.run());

        js = new JavaScriptProgram("1.1", "test.js");
        assertEq(1.1, js.run());

        js = new JavaScriptProgram("true", "test.js");
        assertEq(True, js.run());

        js = new JavaScriptProgram("false", "test.js");
        assertEq(False, js.run());

        js = new JavaScriptProgram("[0, 'one', 2.1]", "test.js");
        assertEq((0, "one", 2.1), js.run());

        JavaScriptObject o(js);
        assertEq("JavaScriptObject", o.className());

        delete js;
        assertEq("JavaScriptObject", o.className());

        js = new JavaScriptProgram("const obj = {
   id: 1,
   type: 't',
};
obj", "test.js");
        o = js.run();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        assertEq({"id": 1, "type": "t"}, o.toHash());
    }
}
