#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires v8
%requires QUnit
%requires Util

%exec-class V8Test

class V8Test inherits Test {
    public {
    }

    constructor() : Test("v8 test", "1.0") {
        addTestCase("async test", \v8AsyncTest());
        addTestCase("v8 program test", \v8ProgramTest());
        addTestCase("exception test", \v8ExceptionTest());
        # Set return value for compatibility with test harnesses that check the return value
        set_return_value(main());
    }

    v8AsyncTest() {
        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}

async function runAsync(a, enqueue) {
    enqueue(await a());
}
", "test.js");
            js.run();
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            Queue q();
            code enqueue = sub (auto v) {
                q.push(v);
            };
            auto v = a(f, enqueue);
            int ec = js.spinEventLoop();
            assertEq(0, ec);
            assertEq(100, q.get());
        }

        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}

async function runAsync(a, enqueue) {
    enqueue(await a());
}
", "test.js");
            js.run();
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            Queue q();
            code enqueue = sub (auto v) {
                q.push(v);
            };
            auto v = a(f, enqueue);

            Queue bgq();
            Counter c(1);
            background sub () {
                c.dec();
                bgq.push(js.spinEventLoop());
            }();
            c.waitForZero();

            assertEq(0, bgq.get());
            assertEq(100, q.get());
        }

        {
            JavaScriptProgram js("
const EventEmitter = require('node:events');
const eventEmitter = new EventEmitter();

async function doPromise() {
    return new Promise(function (resolve) {
        eventEmitter.on('async_event', (v) => {
            resolve(v);
        })
    });
}

function setValue(v) {
    eventEmitter.emit('async_event', v);
}

async function runAsync(a, enqueue) {
    enqueue(await a());
}
", "test.js");
            js.run();

            JavaScriptObject global = js.getGlobal();

            auto doPromise = global.getProperty("doPromise");
            code setValue = global.getProperty("setValue").toData();
            code runAsync = global.getProperty("runAsync").toData();

            Queue data_queue();
            code enqueue = sub (auto v) {
                data_queue.push(v);
            };
            auto v = runAsync(doPromise, enqueue);
            #js.spinEventLoop();

            string str = get_random_string();
            setValue(str);
            int ec = js.spinEventLoop();
            assertEq(0, ec);
            string str0 = data_queue.get();
            assertEq(str, str0);
        }

        {
            JavaScriptProgram js("
function doPromise() {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(100);
        }, 1)
    });
}

async function runAsync(a, b) {
    b.result = await a();
}
", "test.js");
            js.run();
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            int ec = js.spinEventLoop();
            assertEq(0, ec);
            assertEq(100, rv.toData().result);
        }

        {
            JavaScriptProgram js("
async function doPromise() {
    setTimeout(function() {}, 1);
    return 100;
}

async function runAsync(a, b) {
    b.result = await a();
}
", "test.js");
            js.run();
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            int ec = js.spinEventLoop();
            assertEq(0, ec);
            assertEq(100, rv.toData().result);
        }

        {
            JavaScriptProgram js("
async function doPromise() {
    setTimeout(function() {}, 1);
    throw new Error('Test error');
}

async function runAsync(a, b) {
    try {
        b.result = await a();
    } catch (e) {
        b.error = {
            'message': e.message,
            'stack': e.stack,
        };
    }
}
", "test.js");
            js.run();
            int ec = js.spinEventLoop();
            assertEq(0, ec);
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code a = global.getProperty("runAsync").toData();
            JavaScriptObject rv(js);
            auto v = a(f, rv);
            ec = js.spinEventLoop();
            assertEq(0, ec);
            hash<auto> h = rv.toData();
            assertEq("Test error", h.error.message);
            assertEq(Type::String, h.error.stack.type());
        }

        {
            setenv("NODE_TLS_REJECT_UNAUTHORIZED", "0");
            JavaScriptProgram js("
const Https = require('https');
const Agent = new Https.Agent({
    rejectUnauthorized: false
})

async function doPromise() {
    try {
        let response = await fetch('https://localhost:8011/api/public/info', {Agent});
        let data = await response.json();
        return data;
    } catch (e) {
        return {
            'message': e.message,
            'stack': e.stack,
        };
    }
}

async function runAsync(a, enqueue) {
    enqueue(await a());
}
", "test.js");
            js.run();
            JavaScriptObject global = js.getGlobal();
            auto f = global.getProperty("doPromise");
            code runAsync = global.getProperty("runAsync").toData();

            Queue q();
            code enqueue = sub (auto v) {
                q.push(v);
            };
            auto v = runAsync(f, enqueue);
            auto rv;
            while (True) {
                try {
                    rv = q.get(100ms).toData();
                    break;
                } catch (hash<ExceptionInfo> ex) {
                    if (ex.err != "QUEUE-TIMEOUT") {
                        rethrow;
                    }
                }
                int ec = js.spinEventLoop();
                assertEq(0, ec);
            }
            assertEq(Type::Hash, rv.type());
        }
    }

    v8ProgramTest() {
        JavaScriptProgram js("'hi'", "test.js");
        assertEq("hi", js.run());

        js = new JavaScriptProgram("1", "test.js");
        assertEq(1, js.run());

        js = new JavaScriptProgram("1.1", "test.js");
        assertEq(1.1, js.run());

        js = new JavaScriptProgram("true", "test.js");
        assertEq(True, js.run());

        js = new JavaScriptProgram("false", "test.js");
        assertEq(False, js.run());

        js = new JavaScriptProgram("[0, 'one', 2.1]", "test.js");
        assertEq((0, "one", 2.1), js.run());

        JavaScriptObject o(js);
        assertEq("JavaScriptObject", o.className());

        delete js;
        assertEq("JavaScriptObject", o.className());

        js = new JavaScriptProgram("
var foo = function(arg) {
    return arg + 1;
}", "test.js");
        js.run();
        JavaScriptObject global = js.getGlobal();
        auto foo = global.getProperty("foo");
        assertEq(NT_OBJECT, foo.typeCode());
        assertEq("JavaScriptObject", foo.className());
        assertTrue(foo.toData().callp());
        assertEq(2, foo.callAsFunction(NOTHING, 1));

        js = new JavaScriptProgram("const obj = {
    id: 1,
    type: 't',
    func: function(a) {
        ++this.id;
        return a + 1;
    }
};
obj", "test.js");
        o = js.run();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        hash<auto> h = o.toData();
        assertEq({"id": 1, "type": "t"}, h - "func");
        assertTrue(h.func.callp());
        assertEq(1, o.getProperty("id"));
        o.func(1);
        assertEq(2, o.getProperty("id"));
        assertEq(2, o.func(1));
        assertEq(3, o.getProperty("id"));

        js = new JavaScriptProgram("const obj = {
    func: function(a, b) {
        return typeof a;
    }
};
obj", "test.js");
        o = js.run();
        global = js.getGlobal();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        code c = int sub (int i) {
            return i + 1;
        };
        assertEq("function", o.func(c, 1));

        js = new JavaScriptProgram("const obj = {
    func: function(a, b) {
        return a(b);
    }
};
obj", "test.js");
        o = js.run();
        global = js.getGlobal();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        assertEq(2, o.func(c, 1));

        js = new JavaScriptProgram("const obj = {
    func: function(a, b) {
        return a.a(b);
    },
    func0: function(a) {
        return JSON.stringify(a);
    }
};
obj", "test.js");
        o = js.run();
        global = js.getGlobal();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertTrue(h.func.callp());
        hash<auto> obj = {
            "a": c,
        };
        assertEq(2, o.func(obj, 1));

        js = new JavaScriptProgram("const obj = {
    func: null,
    store: function(a) {
        this.func = a;
    }
};
obj", "test.js");
        o = js.run();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        h = o.toData();
        assertNothing(h.func);
        assertTrue(h.store.callp());
        o.store(int sub (int i) {
            return i + 1;
        });
        h = o.toData();
        assertTrue(h.func.callp());
        assertEq(2, o.func(1));

        js = new JavaScriptProgram("const obj = {
    a: 'string',
    b: 1,
    c: {
      d: {
        e: 'hi',
      }
    }
};
obj", "test.js");
        o = js.run();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        assertEq("string", o.a);
        assertEq(1, o.b);
        assertEq("hi", o.c.d.e);
        h = o.toData();
        assertEq("string", h.a);
        assertEq(1, h.b);
        assertEq("hi", h.c.d.e);

        js = new JavaScriptProgram("const obj = {
    a: [1, 2, 3]
};
obj", "test.js");
        o = js.run();
        assertEq(NT_OBJECT, o.typeCode());
        assertEq("JavaScriptObject", o.className());
        assertEq((1, 2, 3), o.a);
        h = o.toData();
        assertEq((1, 2, 3), h.a);
    }

    v8ExceptionTest() {
        hash<ExceptionInfo> ex;
        try {
            JavaScriptProgram js("const obj = {
    func1: function(a, b) {
        return a.a(b);
    },
    func0: function(a, b) {
        return this.func1(a, b);
    }
};
obj", "test.js");
            JavaScriptObject o = js.run();
            o.func0(1, 1);
            assertFalse(True);
        } catch (hash<ExceptionInfo> ex0) {
            ex = ex0;
        }
        on_error printf("source exception: %s\n", get_exception_string(ex));
        assertEq("Object.func1", ex.callstack[0].function);
        assertEq(3, ex.callstack[0].line);
        assertEq("Object.func0", ex.callstack[1].function);
        assertEq(6, ex.callstack[1].line);

        try {
            JavaScriptProgram js("const obj = {
    func: function(a) {
        return a();
    },
};
obj", "test.js");
            JavaScriptObject o = js.run();
            o.func.callAsFunction(o, sub () {
                throw "ERR", "err";
            });
            assertFalse(True);
        } catch (hash<ExceptionInfo> ex0) {
            ex = ex0;
        }
        #printf("%s\n", get_exception_string(ex));
    }
}
