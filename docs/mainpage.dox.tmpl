/** @mainpage Qore v8 Module

    @tableofcontents

    @section v8intro v8 Module Introduction

    The \c v8 module allows for the execution and management of JavaScript code in %Qore.

    To use the module in a %Qore script, use the \c %%requires directive as follows:
    @code %requires v8 @endcode

    Note that while JavaScript and v8 support threading, calls into a single
    @ref V8::JavaScriptProgram "JavaScriptProgram" are subject to thread serialization; only one thread can be active

    Also included with the \c v8 module:
    - <a href="../../TypeScriptActionInterface/html/index.html">TypeScriptActionInterface</a> an API for
      allowing data provider app actions to be created from TypeScript / JavaScript

    Main classes:
    - @ref V8::JavaScriptProgram "JavaScriptProgram"
    - @ref V8::JavaScriptObject "JavaScriptObject"

    @section v8_examples Examples

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires v8

JavaScriptProgram js("var foo = function(arg) { return arg + 1; }", "test.js");
js.run();
JavaScriptObject gb = js.getGlobal();
JavaScriptObject foo = gb.getKeyValue("foo");
int i = foo.callAsFunction(gb, 1);
    @endcode

    @section javascript_javascript_to_qore JavaScript to Qore Data Conversions

    |!Source JavaScript Type|!Target %Qore Type
    |\c bool|\c bool
    |\c int32, \c uint32, \c bigint|\c int or \c number if greater than 64-bits
    |\c number|\c float
    |\c array|\c list
    |\c string|\c string
    |\c object|@ref V8::JavaScriptObject
    |\c null, \c undefined|\c NOTHING

    Other JavaScript types cannot be converted to %Qore; attempting to convert an unsupported type will result in a
    runtime exception.

    @section javascript_qore_to_javascript Qore to JavaScript Data Conversions

    |!Source %Qore Type|!Target JavaScript Type
    |\c binary|\c string (base64-encoded value)
    |\c bool|\c bool
    |\c date|\c string (ISO-8601 format)
    |\c float|\c number
    |\c hash|\c object
    |\c int|\c int32, \c uint32, \b bigint
    |\c list|\c array
    |\c string|\c string
    |@ref V8::JavaScriptObject|\c object
    |\c code|\c callable object
    |\c NOTHING, \c NULL|\c null

    Other %Qore types cannot be converted to JavaScript; attempting to convert an unsupported type will result in a
    runtime exception.

    @section javascript_exceptions JavaScript Exceptions

    Exceptions in JavaScript are propagated to %Qore as %Qore exceptions.

    @section v8_qore_reference_management Managing References to Qore Data in JavaScript

    %Qore's deterministic garbage collection approach and reliance on destructors means that references to %Qore
    data stored in %JavaScript must have their reference counts managed externally.

    %JavaScript objects storing references to %Qore data hold only weak references to %Qore data.

    @subsection v8_qore_object_lifecycle_default Default Qore Reference Management

    By default, %Qore references are saved in thread-local data, so the lifecycle of the object is automatically limited
    to the existence of the thread.

    The thread-local hash key name used to save the list of objects created is determined by the value of the
    \c "_v8_save" thread-local key, if set.  If no such key is set, then \c "_v8_save" is used instead as the
    literal key for saving the list of objects.

    @subsection v8_qore_referene_explicit Explicit Qore Reference Management

    References to %Qore data can be managed explicitly by using the
    @ref V8::JavaScriptProgram::setSaveReferenceCallback() "JavaScriptProgram::setSaveReferenceCallback()" method to set a
    callback that is called every time a %Qore references is stored in a %JavaScript object.

    This callback must take a single \c auto argument as in the following example:

    @code{.py}
hash<auto> ref_cache;
code callback = sub (auto v) {
    # save reference in cache, so it doesn't go out of scope
    ref_cache{v.uniqueHash()} = v;
}
JavaScriptProgram::setSaveReferenceCallback(callback);
    @endcode

    @section v8releasenotes v8 Module Release Notes

    @subsection v8_1_0 v8 Module Version 1.0
    - initial public release
*/
