#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires QUnit
%requires RestClient
%requires ../qlib/TypeScriptActionInterface
%requires v8

%exec-class TypeScriptActionInterfaceTest

public class TypeScriptActionInterfaceTest inherits QUnit::Test {
    constructor() : Test("TypeScriptActionInterfaceTest", "1.0") {
        addTestCase("sanity", \sanityTest());
        addTestCase("js", \jsTest());

        # Return for compatibility with test harnesses that check the script's return value
        set_return_value(main());
    }

    private sanityTest() {
        string name = "TestApp-" + get_random_string();
        hash<auto> app = {
            "name": name,
            "display_name": "TestApp",
            "short_desc": "Test",
            "desc": "Test",
            "logo": make_base64_string(<00>),
            "logo_file_name": "test.svg",
            "logo_mime_type": MimeTypeSvg,
        };
        TypeScriptActionInterface::registerApp(app);
        hash<DataProviderAppInfo> appinfo = DataProviderActionCatalog::getAppEx(name);
        assertEq(name, appinfo.name);

        hash<auto> action = {
            "app": name,
            "action": "test-api",
            "display_name": "Test API",
            "short_desc": "Test API",
            "desc": "Test API",
            "action_code": DPAT_API,
            "api_function": sub () {},
        };
        TypeScriptActionInterface::registerAction(action, new JavaScriptProgram("async function runAsync(a, b, args) {
    b.result = await a(...args);
}", "pgm.js"));
        hash<DataProviderActionInfo> actioninfo = DataProviderActionCatalog::getAppActionEx(name, "test-api");
        assertEq("test-api", actioninfo.action);
    }

    private jsTest() {
        chdir(get_script_dir());
        JavaScriptProgram js(File::readTextFile("example.js"), "example.js");
        JavaScriptObject obj = js.run();

        obj.actionsCatalogue.registerAppActions(TypeScriptActionInterface::Api);

        hash<DataProviderAppInfo> appinfo = DataProviderActionCatalog::getAppEx("js-test");
        assertEq("js-test", appinfo.name);

        hash<DataProviderActionInfo> actioninfo = DataProviderActionCatalog::getAppActionEx("js-test", "test-api");
        assertEq("test-api", actioninfo.action);

        appinfo = DataProviderActionCatalog::getAppEx("js-swagger-test");
        assertEq("js-swagger-test", appinfo.name);

        actioninfo = DataProviderActionCatalog::getAppActionEx("js-swagger-test", "create-pet");
        assertEq("create-pet", actioninfo.action);

        hash<auto> config = {
            "name": "test",
            "url": "tsrest-js-swagger-test://",
            "opts": {
                "subdomain": "test",
            },
        };
        TypeScriptAppRestConnection conn(config);
        assertEq("tsrest-js-swagger-test://test.example.com/api", conn.getUrl());
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.getRealOptions().oauth2_auth_url);
        assertEq("https://test.example.com/oauth2/auth", conn.getAuthUrl());
        assertEq("https://test.example.com/oauth2/auth?scope=&redirect_uri=auto&client_id=x&response_type=code",
            conn.getAuthorizationCodeRequest());
        assertEq("https://test.example.com/oauth2/auth", conn.getOAuth2Options().oauth2_auth_url);
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.orig_opts.oauth2_auth_url);

        hash<ConnectionSchemeInfo> scheme = ConnectionSchemeCache::getSchemeEx("tsrest-js-swagger-test");
        conn = scheme.cls.newObject(config);
        assertEq("tsrest-js-swagger-test://test.example.com/api", conn.getUrl());
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.getRealOptions().oauth2_auth_url);
        assertEq("https://test.example.com/oauth2/auth", conn.getAuthUrl());
        assertEq("https://test.example.com/oauth2/auth?scope=&redirect_uri=auto&client_id=x&response_type=code",
            conn.getAuthorizationCodeRequest());
        assertEq("https://test.example.com/oauth2/auth", conn.getOAuth2Options().oauth2_auth_url);
        assertEq("https://{{subdomain}}.example.com/oauth2/auth", conn.orig_opts.oauth2_auth_url);

        *hash<string, bool> fh = conn.getFeatures();
        on_error printf("fh: %y\n", fh);
        assertTrue(fh{RestConnection::RCF_OAUTH2_AUTH_CODE});

        AbstractDataProvider prov =
            TypeScriptActionInterface::getDataProvider("js-swagger-test", conn).getChildProviderEx("create-pet");
        AbstractDataProviderType t = prov.getRequestType();
        assertEq(6, t.getField("body").getType().getFields().size());
    }
}
