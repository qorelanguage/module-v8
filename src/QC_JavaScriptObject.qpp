/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaScriptObject.qpp defines the %Qore JavaScriptObject class */
/*
    QC_JavaScriptObject.qpp

    Qore Programming Language

    Copyright 2024 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_JavaScriptObject.h"
#include "QC_JavaScriptProgram.h"

//! Object for embedding and executing JavaScript code
/**
*/
qclass JavaScriptObject [arg=QoreV8Object* o; ns=V8];

//! Creates the object
/** @param pgm the JavaScriptProgram where the object will be created from
*/
JavaScriptObject::constructor(JavaScriptProgram[QoreV8ProgramData] pgm) {
    ReferenceHolder<QoreV8ProgramData> holder(pgm, xsink);

    QoreV8ProgramHelper v8h(xsink, pgm);
    if (*xsink) {
        return;
    }

    v8::Isolate* isolate = pgm->getIsolate();

    //printd(5, "JavaScriptObject::constructor() pgm: %p isolate: %p\n", pgm, isolate);

    v8::Local<v8::Object> obj = v8::Object::New(isolate);
    //printd(5, "JavaScriptObject::constructor() created %p\n", *obj);
    self->setPrivate(CID_JAVASCRIPTOBJECT, new QoreV8Object(pgm, obj));
}

//! Call the object as a function and return the result
/** @param js_this the "this" object to call the function on
    @param ... arguments to the function should follow the name converted to JavaScript values as per
    @ref javascript_qore_to_javascript

    @return the return value of the JavaScript function converted to Qore as per @ref javascript_javascript_to_qore

    @see @ref javascript_exceptions
*/
auto JavaScriptObject::callAsFunction(auto js_this, ...) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->callAsFunction(v8h, js_this, 1, args);
}

//! Call the object as a function and return the result
/** @param js_this the "this" object to call the function on
    @param argv arguments to the function as a list converted to JavaScript values as per
    @ref javascript_qore_to_javascript

    @return the return value of the JavaScript function converted to Qore as per @ref javascript_javascript_to_qore

    @see @ref javascript_exceptions
*/
auto JavaScriptObject::callAsFunctionArgs(auto js_this, *softlist<auto> argv) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->callAsFunction(v8h, js_this, 0, argv);
}

//! Returns @ref True if the object is callable as a function
/** @return @ref True if the object is callable as a function
*/
bool JavaScriptObject::isCallable() {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->isCallable(v8h);
}

//! Returns @ref True if the object is a constructor
/** @return @ref True if the object is a constructor
*/
bool JavaScriptObject::isConstructor() {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->isConstructor(v8h);
}

//! Returns the object as data; a hash, list, or call reference
/** @return converts the object to Qore data; a hash, list, or call reference

    @note if the current object is a callable object, it will be returned as a call reference to a JavaScript call
    without a context for JavaScript \c this
*/
auto JavaScriptObject::toData() {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->toData(v8h);
}

//! Returns the value for the given key, if any
/** @return the value for the given key, if any
*/
auto JavaScriptObject::getKeyValue(string key) {
    TempEncodingHelper str(key, QCS_UTF8, xsink);
    if (*xsink) {
        return QoreValue();
    }
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->getKeyValue(v8h, str->c_str());
}

//! Returns the value for the array index, if any
/** @return the value for the array index, if any
*/
auto JavaScriptObject::getIndexValue(int i) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }
    return o->getIndexValue(v8h, i);
}

//! Calls the JavaScript method and returns the response
/** @param m the method name
    @param ... any argument to the method

    @return the response from the JavaScript method
*/
auto JavaScriptObject::methodGate(string m, ...) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }

    v8::Local<v8::Value> attr = o->getV8KeyValue(v8h, m->c_str());
    if (*xsink) {
        return QoreValue();
    }

    if (!attr->IsObject()) {
        v8::Local<v8::String> str = attr->TypeOf(v8h.getIsolate());
        // Convert the result to an UTF8 string
        v8::String::Utf8Value utf8(v8h.getIsolate(), str);
        xsink->raiseException("JAVASCRIPT-METHODCALL-ERROR", "Object key '%s' is v8 type '%s'; must be a callable "
            "object to make a method call", m->c_str(), *utf8);
        return QoreValue();
    }

    v8::MaybeLocal<v8::Object> maybe_attrobj = attr->ToObject(v8h.getContext());
    if (maybe_attrobj.IsEmpty()) {
        v8h.checkException();
        return QoreValue();
    }

    ReferenceHolder<QoreV8Object> meth(new QoreV8Object(o->getProgram(), maybe_attrobj.ToLocalChecked()), xsink);
    return meth->callAsFunction(v8h, self, 1, args);
}

//! Returns the value of the given JavaScript object property
/** @param m the property name

    @return the value of the property
*/
auto JavaScriptObject::memberGate(string m, ...) {
    QoreV8ProgramHelper v8h(xsink, o->getProgram());
    if (*xsink) {
        return QoreValue();
    }

    v8::Local<v8::Value> attr = o->getV8KeyValue(v8h, m->c_str());
    if (*xsink) {
        return QoreValue();
    }

    return v8h.getProgram()->getQoreValue(xsink, attr);
}

//! Returns the QoreV8Object that contains this object
/** @return the QoreV8Object that contains this object
*/
JavaScriptProgram JavaScriptObject::getProgram() {
    return o->getReferencedProgram();
}